from icssploit import (
    exploits,
    print_success,
    print_status,
    print_error,
    mute,
    validators,
)
import asyncio
import BAC0
from BAC0.scripts.script_runner import run

bacnet = None

class Exploit (exploits.Exploit):
    # Info about the exploi
    __info__ = {
        'name': 'BACnet object discovery',
        'authors': [
            'lorenzo bruno <lorenzo.bruno7[at]studenti.unimi.it>' 
        ],
        'description': 'Scan all devices on a remote/local BACnet network through a BBMD using whois message.',
        'references': [
        ],
    }

    localBACnetDevice = exploits.Option('', 'Local machine address e.g. 192.168.1.21', validators=validators.ipv4)
    target = exploits.Option('', 'Target address e.g. 192.168.1.42', validators=validators.ipv4)
    port = exploits.Option(47808, 'Bacnet port, default is 47808/UDP (0xBAC0)', validators=validators.integer)
    session = ""

    async def main():
        # Configuration
        while True:
            localIP = input("Please enter local IP (Exit to end): ")
            if 'Exit' == localIP:
                break
            print("Local ip set to: ", localIP)
        while True:
            BBMDip = input("Please enter BBMD IP (Exit to end): ")
            if 'Exit' == BBMDip:
                break
            print("BBMD ip set to: ", BBMDip)   

        ip = localIP
        bbmd_ip = BBMDip + '47808'  # BBMD IP
        bbmd_ttl = 1200  # Increased timeout (20 minutes)

        # Initialize BACnet
        async with BAC0.start(ip=ip, bbmdAddress=bbmd_ip, bbmdTTL=bbmd_ttl) as bacnet:
            await bacnet._discover()
            lst = await bacnet._devices(_return_list=True)
            #print(lst)

    if __name__ == "__main__":
        #run(main, bacnet) # Run the script and deals with SIGINT and SIGTERM, useful for long time runnign scripts.
        BAC0.log_level(log_file='error', stdout='error', stderr='error')  # Set log level to error
        asyncio.run(main())